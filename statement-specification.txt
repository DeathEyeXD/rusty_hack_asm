statement -> instruction | label;
instruction -> a-instruction | c-instruction;

label -> '(' IDENTIFIER ')';
a-instruction -> '@' literal;

c-instruction -> (dest '=')? comp (';' jump)?;

literal -> NUMBER | IDENTIFIER;

dest -> 'A'? 'M'? 'D'?;
jump -> JMP | JGT | JGE | JLT | JLE | JNE | JEQ;

comp -> const | unary | binary;

name -> const | reg;
const -> 0 | 1;
reg -> 'D' | 'A | 'M';

unary -> ('-' | '!') name;
binary -> name operator name;
operator -> ('+' | '-' | '|' | '&');